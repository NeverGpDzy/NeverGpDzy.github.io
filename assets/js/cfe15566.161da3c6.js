"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5352],{3195:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>a,frontMatter:()=>d,metadata:()=>s,toc:()=>o});var t=i(4848),r=i(8453);const d={},c="\u6570\u636e\u7ed3\u678413-\u54c8\u592b\u66fc\u6811",s={id:"DataStructer/\u6570\u636e\u7ed3\u678413-\u54c8\u592b\u66fc\u6811",title:"\u6570\u636e\u7ed3\u678413-\u54c8\u592b\u66fc\u6811",description:"\u4ee3\u7801",source:"@site/docs/DataStructer/\u6570\u636e\u7ed3\u678413-\u54c8\u592b\u66fc\u6811.md",sourceDirName:"DataStructer",slug:"/DataStructer/\u6570\u636e\u7ed3\u678413-\u54c8\u592b\u66fc\u6811",permalink:"/docs/DataStructer/\u6570\u636e\u7ed3\u678413-\u54c8\u592b\u66fc\u6811",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"DataStructerSidebar",previous:{title:"\u6570\u636e\u7ed3\u678412-\u4e8c\u53c9\u6811\u7684\u6784\u5efa\u4e0e\u904d\u5386",permalink:"/docs/DataStructer/\u6570\u636e\u7ed3\u678412-\u4e8c\u53c9\u6811\u7684\u6784\u5efa\u4e0e\u904d\u5386"},next:{title:"\u6570\u636e\u7ed3\u678414-N\u540e\u95ee\u9898",permalink:"/docs/DataStructer/\u6570\u636e\u7ed3\u678414-N\u540e\u95ee\u9898"}},l={},o=[{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:2},{value:"\u4ee3\u7801\u603b\u7ed3",id:"\u4ee3\u7801\u603b\u7ed3",level:3},{value:"\u8fd0\u884c\u7ed3\u679c",id:"\u8fd0\u884c\u7ed3\u679c",level:2}];function h(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"\u6570\u636e\u7ed3\u678413-\u54c8\u592b\u66fc\u6811",children:"\u6570\u636e\u7ed3\u678413-\u54c8\u592b\u66fc\u6811"}),"\n",(0,t.jsx)(e.h2,{id:"\u4ee3\u7801",children:"\u4ee3\u7801"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:"#include <stdio.h>\n#include <stdlib.h>\n#define MAXSIZE 100\n\n// \u5b9a\u4e49\u4e00\u4e2a\u7ed3\u70b9\u7ed3\u6784\u4f53\ntypedef struct NODE {\n    char c;            // \u5b57\u7b26\n    int weight;        // \u6743\u91cd\n    int binary;        // \u4e8c\u8fdb\u5236\u7f16\u7801\n    int flag;          // \u6807\u5fd7\u4f4d\n    struct NODE *lchild, *rchild, *parent;  // \u5de6\u5b69\u5b50\u3001\u53f3\u5b69\u5b50\u3001\u7236\u7ed3\u70b9\u6307\u9488\n} NODE, *PNODE;\n\n// \u5b9a\u4e49\u4e00\u4e2a\u6808\u7ed3\u6784\u4f53\ntypedef struct {\n    int valuse[MAXSIZE]; // \u6808\u7684\u503c\n    int top;             // \u6808\u9876\u6307\u9488\n} STACK;\n\n// \u521d\u59cb\u5316\u6808\nvoid initStack(STACK &stack) {\n    stack.top = 0;\n}\n\n// \u5165\u6808\u64cd\u4f5c\nvoid push(STACK &stack, int value) {\n    stack.valuse[stack.top++] = value;\n}\n\n// \u51fa\u6808\u64cd\u4f5c\nint pop(STACK &stack) {\n    if (stack.top == 0)\n        return -1;\n    stack.top--;\n    return stack.valuse[stack.top];\n}\n\n// \u521d\u59cb\u5316\u7ed3\u70b9\nvoid initNode(PNODE node) {\n    node->lchild = NULL;\n    node->parent = NULL;\n    node->rchild = NULL;\n    node->flag = 0;\n    node->weight = 0;\n    node->c = -1;\n    node->binary = 0;\n}\n\n// \u521b\u5efa\u7ed3\u70b9\nPNODE createNode(int weight) {\n    PNODE node = (PNODE)malloc(sizeof(NODE));\n    if (node) {\n        initNode(node);\n        node->weight = weight;\n    }\n    return node;\n}\n\n// \u5b57\u7b26\u7f16\u7801\nSTACK charEncode(char c, PNODE childrenNodes, int lenOfNodes) {\n    STACK stack;\n    initStack(stack);\n    for (int i = 0; i < lenOfNodes; i++) {\n        if (c == childrenNodes[i].c) {\n            PNODE tmp = &childrenNodes[i];\n            while (tmp->parent != NULL) {\n                push(stack, tmp->binary);\n                tmp = tmp->parent;\n            }\n            break;\n        }\n    }\n    return stack;\n}\n\n// \u5b57\u7b26\u4e32\u7f16\u7801\nchar *strEncode(char *str, PNODE childrenNodes, int lenOfNodes) {\n    char *result = (char *)malloc(sizeof(char) * MAXSIZE * lenOfNodes);\n    int len = 0;\n    while (*str != '\\0') {\n        STACK stack = charEncode(*str, childrenNodes, lenOfNodes);\n        while (stack.top > 0) {\n            result[len++] = pop(stack) + '0';\n        }\n        str++;\n    }\n    result[len] = '\\0';\n    return result;\n}\n\n// \u83b7\u53d6\u6700\u5c0f\u6743\u91cd\u7684\u7ed3\u70b9\nPNODE getMinWeightNode(PNODE nodes, int lenOfNodes) {\n    PNODE node;\n    int min = 0, i;\n    while (min < lenOfNodes) {\n        if (nodes[min].flag == 0) {\n            break;\n        }\n        min++;\n    }\n    if (min == lenOfNodes) {\n        return NULL;\n    }\n    for (i = min + 1; i < lenOfNodes; i++) {\n        if (nodes[i].flag == 0 && nodes[i].weight < nodes[min].weight) {\n            min = i;\n            continue;\n        }\n    }\n    nodes[min].flag = 1;\n    return &nodes[min];\n}\n\n// \u521b\u5efa\u970d\u592b\u66fc\u6811\nPNODE createHuffmanTree(PNODE nodes, int lenOfNodes, PNODE childNode) {\n    PNODE minWeightNode, parentNode;\n    minWeightNode = getMinWeightNode(nodes, lenOfNodes);\n    if (!minWeightNode)\n        return childNode;\n    if (!childNode) {\n        parentNode = minWeightNode;\n    } else {\n        parentNode = createNode(childNode->weight + minWeightNode->weight);\n        if (childNode->weight < minWeightNode->weight) {\n            parentNode->lchild = childNode;\n            parentNode->rchild = minWeightNode;\n        } else {\n            parentNode->rchild = childNode;\n            parentNode->lchild = minWeightNode;\n        }\n        parentNode->lchild->binary = 0;\n        parentNode->rchild->binary = 1;\n        childNode->parent = minWeightNode->parent = parentNode;\n    }\n    createHuffmanTree(nodes, lenOfNodes, parentNode);\n}\n\n// \u5c06\u5b57\u7b26\u8f6c\u6362\u4e3a\u5c0f\u5199\nchar charTolowercase(char c) {\n    if (c >= 'A' && c <= 'Z') {\n        c += 'a' - 'A';\n    }\n    return c;\n}\n\n// \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5b57\u7b26\u5e76\u7edf\u8ba1\u6743\u91cd\uff0c\u6784\u5efa\u970d\u592b\u66fc\u6811\nPNODE readFromSource(const char *filePath, char *buff, PNODE childrenNodes, int &lenOfNodes) {\n    int lenOfStr = 0, i;\n    char c;\n    FILE *file = fopen(filePath, \"rb\");\n    if (file == NULL) {\n        puts(\"Can't find source file!\");\n        exit(0);\n    }\n    c = fgetc(file);\n    while (!feof(file)) {\n        c = charTolowercase(c);\n        initNode(&childrenNodes[lenOfNodes]);\n        buff[lenOfStr++] = c;\n        for (i = 0; i < lenOfNodes; i++) {\n            if (childrenNodes[i].c == c) {\n                childrenNodes[i].weight++;\n                break;\n            }\n        }\n        if (i == lenOfNodes) {\n            childrenNodes[lenOfNodes].c = c;\n            childrenNodes[lenOfNodes++].weight++;\n        }\n        c = fgetc(file);\n    }\n    buff[lenOfStr] = '\\0';\n    fclose(file);\n    return createHuffmanTree(childrenNodes, lenOfNodes, NULL);\n}\n\n// \u5c06\u7f16\u7801\u7ed3\u679c\u5199\u5165\u6587\u4ef6\nvoid writeResult(const char *filePath, char *result) {\n    FILE *fp = fopen(filePath, \"wb\");\n    if (fputs(result, fp) >= 0) {\n        printf(\"\u751f\u6210\u7ed3\u679c\u6210\u529f\\r\\n\");\n    }\n    fclose(fp);\n}\n\n// \u5b57\u7b26\u4e32\u89e3\u7801\nchar *strDecode(const char *str, PNODE TreeRoot) {\n    const char *tmp = str;\n    char *result = (char *)malloc(sizeof(char) * MAXSIZE);\n    int len = 0;\n    while (*tmp != '\\0') {\n        PNODE tmpNode = TreeRoot;\n        while (tmpNode->lchild && tmpNode->rchild) {\n            tmpNode = *tmp == '0' ? tmpNode->lchild : tmpNode->rchild;\n            tmp++;\n        }\n        result[len++] = tmpNode->c;\n    }\n    result[len] = '\\0';\n    return result;\n}\n\nint main() {\n    char buff[MAXSIZE];\n    NODE childrenNodes[MAXSIZE];\n    int len = 0;\n    PNODE root = readFromSource(\"source.txt\", buff, childrenNodes, len);\n    writeResult(\"result.txt\", strEncode(buff, childrenNodes, len));\n    printf(\"%s\", strDecode(\"11111111111110111111111110011101111111111011001110011111111101111111101111111011111101111101100111101010\", root));\n    return 0;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\u4ee3\u7801\u603b\u7ed3",children:"\u4ee3\u7801\u603b\u7ed3"}),"\n",(0,t.jsx)(e.p,{children:"\u8fd9\u6bb5\u4ee3\u7801\u5b9e\u73b0\u4e86\u4e00\u4e2a\u970d\u592b\u66fc\u7f16\u7801\u7684\u793a\u4f8b\u3002\u970d\u592b\u66fc\u7f16\u7801\u662f\u4e00\u79cd\u65e0\u635f\u6570\u636e\u538b\u7f29\u7b97\u6cd5\u3002\u4ee3\u7801\u7684\u4e3b\u8981\u529f\u80fd\u5305\u62ec\uff1a"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u7ed3\u70b9\u5b9a\u4e49\u548c\u521d\u59cb\u5316"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\u5b9a\u4e49\u4e86\u7ed3\u70b9\u7ed3\u6784\u4f53 ",(0,t.jsx)(e.code,{children:"NODE"}),"\uff0c\u5305\u542b\u5b57\u7b26\u3001\u6743\u91cd\u3001\u4e8c\u8fdb\u5236\u7f16\u7801\u3001\u6807\u5fd7\u4f4d\u4ee5\u53ca\u5de6\u53f3\u5b69\u5b50\u548c\u7236\u7ed3\u70b9\u6307\u9488\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:["\u5b9a\u4e49\u5e76\u5b9e\u73b0\u4e86\u6808\u7ed3\u6784\u4f53 ",(0,t.jsx)(e.code,{children:"STACK"})," \u53ca\u5176\u521d\u59cb\u5316\u3001\u5165\u6808\u548c\u51fa\u6808\u64cd\u4f5c\u3002"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u7ed3\u70b9\u64cd\u4f5c"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"initNode"})," \u51fd\u6570\u7528\u4e8e\u521d\u59cb\u5316\u7ed3\u70b9\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"createNode"})," \u51fd\u6570\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ed3\u70b9\uff0c\u5e76\u521d\u59cb\u5316\u5176\u6743\u91cd\u3002"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u970d\u592b\u66fc\u6811\u6784\u5efa"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"getMinWeightNode"})," \u51fd\u6570\u7528\u4e8e\u4ece\u7ed3\u70b9\u6570\u7ec4\u4e2d\u83b7\u53d6\u6743\u91cd\u6700\u5c0f\u7684\u7ed3\u70b9\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"createHuffmanTree"})," \u51fd\u6570\u7528\u4e8e\u9012\u5f52\u5730\u521b\u5efa\u970d\u592b\u66fc\u6811\u3002"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u5b57\u7b26\u7f16\u7801\u548c\u89e3\u7801"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"charEncode"})," \u51fd\u6570\u7528\u4e8e\u5c06\u5355\u4e2a\u5b57\u7b26\u7f16\u7801\u4e3a\u970d\u592b\u66fc\u7f16\u7801\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"strEncode"})," \u51fd\u6570\u7528\u4e8e\u5c06\u5b57\u7b26\u4e32\u7f16\u7801\u4e3a\u970d\u592b\u66fc\u7f16\u7801\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"strDecode"})," \u51fd\u6570\u7528\u4e8e\u5c06\u970d\u592b\u66fc\u7f16\u7801\u89e3\u7801\u4e3a\u539f\u59cb\u5b57\u7b26\u4e32\u3002"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u6587\u4ef6\u64cd\u4f5c"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"readFromSource"})," \u51fd\u6570\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5b57\u7b26\u5e76\u7edf\u8ba1\u5176\u6743\u91cd\uff0c\u6784\u5efa\u970d\u592b\u66fc\u6811\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"writeResult"})," \u51fd\u6570\u5c06\u7f16\u7801\u540e\u7684\u5b57\u7b26\u4e32\u5199\u5165\u6587\u4ef6\u3002"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u4e3b\u51fd\u6570"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"main"})," \u51fd\u6570\u4ece\u6587\u4ef6 ",(0,t.jsx)(e.code,{children:"source.txt"})," \u8bfb\u53d6\u6570\u636e\uff0c\u751f\u6210\u970d\u592b\u66fc\u6811\uff0c\u5e76\u5c06\u7f16\u7801\u7ed3\u679c\u5199\u5165 ",(0,t.jsx)(e.code,{children:"result.txt"})," \u6587\u4ef6\uff0c\u6700\u540e\u5c06\u4e00\u4e2a\u793a\u4f8b\u7f16\u7801\u5b57\u7b26\u4e32\u89e3\u7801\u5e76\u6253\u5370\u3002"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"\u8fd9\u6bb5\u4ee3\u7801\u8be6\u7ec6\u5c55\u793a\u4e86\u5982\u4f55\u5229\u7528\u970d\u592b\u66fc\u7f16\u7801\u8fdb\u884c\u6570\u636e\u538b\u7f29\u4e0e\u89e3\u538b\u7f29\u7684\u5168\u8fc7\u7a0b\u3002"}),"\n",(0,t.jsx)(e.h2,{id:"\u8fd0\u884c\u7ed3\u679c",children:"\u8fd0\u884c\u7ed3\u679c"}),"\n",(0,t.jsx)(e.p,{children:"\u65e0\u6e90\u6587\u4ef6"})]})}function a(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(h,{...n})}):h(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>c,x:()=>s});var t=i(6540);const r={},d=t.createContext(r);function c(n){const e=t.useContext(d);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:c(n.components),t.createElement(d.Provider,{value:e},n.children)}}}]);