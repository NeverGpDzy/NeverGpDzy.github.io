"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2085],{353:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>m,frontMatter:()=>p,metadata:()=>i,toc:()=>o});var a=e(4848),r=e(8453);const p={},c=void 0,i={id:"DataStructer/\u6570\u636e\u7ed3\u678407-\u62ec\u53f7\u5339\u914d",title:"\u6570\u636e\u7ed3\u678407-\u62ec\u53f7\u5339\u914d",description:"\u6570\u636e\u7ed3\u678407-\u62ec\u53f7\u5339\u914d",source:"@site/docs/DataStructer/\u6570\u636e\u7ed3\u678407-\u62ec\u53f7\u5339\u914d.md",sourceDirName:"DataStructer",slug:"/DataStructer/\u6570\u636e\u7ed3\u678407-\u62ec\u53f7\u5339\u914d",permalink:"/docs/DataStructer/\u6570\u636e\u7ed3\u678407-\u62ec\u53f7\u5339\u914d",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"DataStructerSidebar",previous:{title:"\u6570\u636e\u7ed3\u678406-\u6808",permalink:"/docs/DataStructer/\u6570\u636e\u7ed3\u678406-\u6808"},next:{title:"\u6570\u636e\u7ed3\u678408-\u6c49\u8bfa\u5854\u95ee\u9898",permalink:"/docs/DataStructer/\u6570\u636e\u7ed3\u678408-\u6c49\u8bfa\u5854\u95ee\u9898"}},s={},o=[{value:"\u6570\u636e\u7ed3\u678407-\u62ec\u53f7\u5339\u914d",id:"\u6570\u636e\u7ed3\u678407-\u62ec\u53f7\u5339\u914d",level:2},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u8fd0\u884c\u7ed3\u679c",id:"\u8fd0\u884c\u7ed3\u679c",level:3}];function h(n){const t={code:"code",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"\u6570\u636e\u7ed3\u678407-\u62ec\u53f7\u5339\u914d",children:"\u6570\u636e\u7ed3\u678407-\u62ec\u53f7\u5339\u914d"}),"\n",(0,a.jsx)(t.h3,{id:"\u4ee3\u7801",children:"\u4ee3\u7801"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-c",children:"#include <stdbool.h>\n#include <stdio.h>\n#include <malloc.h>\n\n#define STACK_MAX_SIZE 10 // \u5b9a\u4e49\u6808\u7684\u6700\u5927\u5927\u5c0f\n\n/**\n * \u8868\u793a\u6574\u6570\u7684\u7ebf\u6027\u6808\u3002\u5173\u952e\u662f\u6570\u636e\u3002\n */\ntypedef struct CharStack {\n    int top; // \u6808\u9876\u6307\u9488\n\n    char data[STACK_MAX_SIZE]; // \u6570\u636e\u6570\u7ec4\uff0c\u6700\u5927\u957f\u5ea6\u56fa\u5b9a\n} *CharStackPtr;\n\n/**\n * \u8f93\u51fa\u6808\u7684\u5185\u5bb9\u3002\n */\nvoid outputStack(CharStackPtr paraStack) {\n    for (int i = 0; i <= paraStack->top; i ++) {\n        printf(\"%c \", paraStack->data[i]);\n    }// \u5faa\u73af\u7ed3\u675f\n    printf(\"\\r\\n\");\n}// \u7ed3\u675f outputStack\n\n/**\n * \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u7684\u5b57\u7b26\u6808\u3002\u8fd9\u4e2a\u51fd\u6570\u6ca1\u6709\u9519\u8bef\u68c0\u67e5\u3002\n * @param paraStackPtr \u6808\u7684\u6307\u9488\u3002\u5fc5\u987b\u662f\u6307\u9488\u624d\u80fd\u6539\u53d8\u6808\u3002\n * @param paraValues \u5b58\u50a8\u6240\u6709\u5143\u7d20\u7684int\u6570\u7ec4\u3002\n */\nCharStackPtr charStackInit() {\n    CharStackPtr resultPtr = (CharStackPtr)malloc(sizeof(struct CharStack));\n    resultPtr->top = -1; // \u521d\u59cb\u5316\u6808\u9876\u4e3a-1\uff0c\u8868\u793a\u7a7a\u6808\n\n    return resultPtr;\n}// \u7ed3\u675f charStackInit\n\n/**\n * \u5c06\u4e00\u4e2a\u5143\u7d20\u63a8\u5165\u6808\u3002\n * @param paraValue \u8981\u63a8\u5165\u7684\u503c\u3002\n */\nvoid push(CharStackPtr paraStackPtr, int paraValue) {\n    // \u6b65\u9aa4 1. \u68c0\u67e5\u7a7a\u95f4\u3002\n    if (paraStackPtr->top >= STACK_MAX_SIZE - 1) {\n        printf(\"Cannot push element: stack full.\\r\\n\");\n        return;\n    }// \u7ed3\u675f if\n\n    // \u6b65\u9aa4 2. \u66f4\u65b0\u6808\u9876\u3002\n    paraStackPtr->top ++;\n\n    // \u6b65\u9aa4 3. \u63a8\u5165\u5143\u7d20\u3002\n    paraStackPtr->data[paraStackPtr->top] = paraValue;\n}// \u7ed3\u675f push\n\n/**\n * \u4ece\u6808\u4e2d\u5f39\u51fa\u4e00\u4e2a\u5143\u7d20\u3002\n * @return \u88ab\u5f39\u51fa\u7684\u503c\u3002\n */\nchar pop(CharStackPtr paraStackPtr) {\n    // \u6b65\u9aa4 1. \u68c0\u67e5\u7a7a\u95f4\u3002\n    if (paraStackPtr->top < 0) {\n        printf(\"Cannot pop element: stack empty.\\r\\n\");\n        return '\\0';\n    }// \u7ed3\u675f if\n\n    // \u6b65\u9aa4 2. \u66f4\u65b0\u6808\u9876\u3002\n    paraStackPtr->top --;\n\n    // \u6b65\u9aa4 3. \u5f39\u51fa\u5143\u7d20\u3002\n    return paraStackPtr->data[paraStackPtr->top + 1];\n}// \u7ed3\u675f pop\n\n/**\n * \u6d4b\u8bd5 push \u51fd\u6570\u3002\n */\nvoid pushPopTest() {\n    printf(\"---- pushPopTest begins. ----\\r\\n\");\n    char ch;\n    \n    // \u521d\u59cb\u5316\u3002\n    CharStackPtr tempStack = charStackInit();\n    printf(\"After initialization, the stack is: \");\n    outputStack(tempStack);\n\n    // \u63a8\u5165\u3002\n    for (ch = 'a'; ch < 'm'; ch ++) {\n        printf(\"Pushing %c.\\r\\n\", ch);\n        push(tempStack, ch);\n        outputStack(tempStack);\n    }// \u7ed3\u675f for\n\n    // \u5f39\u51fa\u3002\n    for (int i = 0; i < 3; i ++) {\n        ch = pop(tempStack);\n        printf(\"Pop %c.\\r\\n\", ch);\n        outputStack(tempStack);\n    }// \u7ed3\u675f for\n\n    printf(\"---- pushPopTest ends. ----\\r\\n\");\n}// \u7ed3\u675f pushPopTest\n\n/**\n * \u5224\u65ad\u62ec\u53f7\u662f\u5426\u5339\u914d\u3002\n * \n * @param paraString \u7ed9\u5b9a\u7684\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\u3002\n * @return \u662f\u5426\u5339\u914d\u3002\n */\nbool bracketMatching(char* paraString, int paraLength) {\n    // \u6b65\u9aa4 1. \u521d\u59cb\u5316\u6808\uff0c\u5e95\u90e8\u63a8\u5165\u4e00\u4e2a '#'\u3002\n    CharStackPtr tempStack = charStackInit();\n    push(tempStack, '#');\n    char tempChar, tempPopedChar;\n\n    // \u6b65\u9aa4 2. \u5904\u7406\u5b57\u7b26\u4e32\u3002\n    for (int i = 0; i < paraLength; i++) {\n        tempChar = paraString[i];\n\n        switch (tempChar) {\n        case '(':\n        case '[':\n        case '{':\n            push(tempStack, tempChar);\n            break;\n        case ')':\n            tempPopedChar = pop(tempStack);\n            if (tempPopedChar != '(') {\n                return false;\n            } // \u7ed3\u675f if\n            break;\n        case ']':\n            tempPopedChar = pop(tempStack);\n            if (tempPopedChar != '[') {\n                return false;\n            } // \u7ed3\u675f if\n            break;\n        case '}':\n            tempPopedChar = pop(tempStack);\n            if (tempPopedChar != '{') {\n                return false;\n            } // \u7ed3\u675f if\n            break;\n        default:\n            // \u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002\n            break;\n        }// \u7ed3\u675f switch\n    } // \u7ed3\u675f for\n\n    tempPopedChar = pop(tempStack);\n    if (tempPopedChar != '#') {\n        return false;\n    } // \u7ed3\u675f if\n\n    return true;\n}// \u7ed3\u675f bracketMatching\n\n/**\n * \u5355\u5143\u6d4b\u8bd5\u3002\n */\nvoid bracketMatchingTest() {\n    char* tempExpression = \"[2 + (1 - 3)] * 4\";\n    bool tempMatch = bracketMatching(tempExpression, 17);\n    printf(\"Is the expression '%s' bracket matching? %d \\r\\n\", tempExpression, tempMatch);\n\n    tempExpression = \"( )  )\";\n    tempMatch = bracketMatching(tempExpression, 6);\n    printf(\"Is the expression '%s' bracket matching? %d \\r\\n\", tempExpression, tempMatch);\n\n    tempExpression = \"()()(())\";\n    tempMatch = bracketMatching(tempExpression, 8);\n    printf(\"Is the expression '%s' bracket matching? %d \\r\\n\", tempExpression, tempMatch);\n\n    tempExpression = \"({}[])\";\n    tempMatch = bracketMatching(tempExpression, 6);\n    printf(\"Is the expression '%s' bracket matching? %d \\r\\n\", tempExpression, tempMatch);\n\n    tempExpression = \")(\";\n    tempMatch = bracketMatching(tempExpression, 2);\n    printf(\"Is the expression '%s' bracket matching? %d \\r\\n\", tempExpression, tempMatch);\n}// \u7ed3\u675f bracketMatchingTest\n\n/**\n * \u7a0b\u5e8f\u5165\u53e3\u3002\n */\nvoid main() {\n    // pushPopTest(); // \u6d4b\u8bd5\u63a8\u5165\u548c\u5f39\u51fa\u529f\u80fd\n    bracketMatchingTest(); // \u6d4b\u8bd5\u62ec\u53f7\u5339\u914d\u529f\u80fd\n}// \u7ed3\u675f main\n"})}),"\n",(0,a.jsxs)(t.p,{children:["\u603b\u7ed3\uff1a\n\u8fd9\u6bb5\u4ee3\u7801\u5b9e\u73b0\u4e86\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u5b57\u7b26\u6808\uff08\u6700\u5927\u4e3a10\u4e2a\u5143\u7d20\uff09\uff0c\u5305\u62ec\u57fa\u672c\u64cd\u4f5c\u5982\u521d\u59cb\u5316\u3001\u63a8\u5165\uff08push\uff09\u548c\u5f39\u51fa\uff08pop\uff09\u3002\u5b83\u8fd8\u5305\u62ec\u4e00\u4e2a\u7528\u4e8e\u8f93\u51fa\u6808\u5185\u5bb9\u7684\u8f85\u52a9\u51fd\u6570\u548c\u4e24\u4e2a\u6d4b\u8bd5\u51fd\u6570\uff1a",(0,a.jsx)(t.code,{children:"pushPopTest"}),"\u7528\u4e8e\u6d4b\u8bd5\u63a8\u5165\u548c\u5f39\u51fa\u64cd\u4f5c\uff0c",(0,a.jsx)(t.code,{children:"bracketMatchingTest"}),"\u7528\u4e8e\u6d4b\u8bd5\u62ec\u53f7\u5339\u914d\u95ee\u9898\uff0c\u68c0\u67e5\u7ed9\u5b9a\u5b57\u7b26\u4e32\u4e2d\u7684\u62ec\u53f7\u662f\u5426\u6b63\u786e\u5339\u914d\u3002\u4e3b\u51fd\u6570",(0,a.jsx)(t.code,{children:"main"}),"\u8c03\u7528\u4e86\u62ec\u53f7\u5339\u914d\u6d4b\u8bd5\u51fd\u6570\u3002\u4ee3\u7801\u4e2d\u7684\u6bcf\u4e2a\u51fd\u6570\u90fd\u6709\u8be6\u7ec6\u7684\u4e2d\u6587\u6ce8\u91ca\uff0c\u8bf4\u660e\u4e86\u5176\u529f\u80fd\u548c\u5de5\u4f5c\u539f\u7406\u3002"]}),"\n",(0,a.jsx)(t.h3,{id:"\u8fd0\u884c\u7ed3\u679c",children:"\u8fd0\u884c\u7ed3\u679c"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:"http://picture.nevergpdzy.cn/img_for_Typora/44f22fc688bf42a5b23e2488005153a9.png",alt:""})})]})}function m(n={}){const{wrapper:t}={...(0,r.R)(),...n.components};return t?(0,a.jsx)(t,{...n,children:(0,a.jsx)(h,{...n})}):h(n)}},8453:(n,t,e)=>{e.d(t,{R:()=>c,x:()=>i});var a=e(6540);const r={},p=a.createContext(r);function c(n){const t=a.useContext(p);return a.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function i(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:c(n.components),a.createElement(p.Provider,{value:t},n.children)}}}]);