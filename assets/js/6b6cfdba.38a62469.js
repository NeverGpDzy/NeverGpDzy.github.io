"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2903],{6428:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>o,frontMatter:()=>i,metadata:()=>h,toc:()=>t});var l=a(4848),s=a(8453);const i={},r="\u6570\u636e\u7ed3\u678418-\u54c8\u5e0c\u8868",h={id:"DataStructer/\u6570\u636e\u7ed3\u678418-\u54c8\u5e0c\u8868",title:"\u6570\u636e\u7ed3\u678418-\u54c8\u5e0c\u8868",description:"\u54c8\u5e0c\u8868\uff08Hash Table\uff09\u662f\u4e00\u79cd\u975e\u5e38\u9ad8\u6548\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e3b\u8981\u7528\u4e8e\u5feb\u901f\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u3002\u5b83\u901a\u8fc7\u54c8\u5e0c\u51fd\u6570\u5c06\u952e\u6620\u5c04\u5230\u8868\u4e2d\u7684\u7279\u5b9a\u4f4d\u7f6e\uff0c\u4ece\u800c\u52a0\u5feb\u6570\u636e\u8bbf\u95ee\u901f\u5ea6\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u8be6\u7ec6\u4e14\u7cfb\u7edf\u7684\u54c8\u5e0c\u8868\u5b9e\u73b0\u6307\u5357\uff0c\u5305\u62ec\u57fa\u672c\u6982\u5ff5\u3001\u54c8\u5e0c\u51fd\u6570\u3001\u51b2\u7a81\u89e3\u51b3\u65b9\u6cd5\u4ee5\u53ca\u5728C\u8bed\u8a00\u4e2d\u7684\u5177\u4f53\u5b9e\u73b0\u3002",source:"@site/docs/DataStructer/\u6570\u636e\u7ed3\u678418-\u54c8\u5e0c\u8868.md",sourceDirName:"DataStructer",slug:"/DataStructer/\u6570\u636e\u7ed3\u678418-\u54c8\u5e0c\u8868",permalink:"/docs/DataStructer/\u6570\u636e\u7ed3\u678418-\u54c8\u5e0c\u8868",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"DataStructerSidebar",previous:{title:"\u6570\u636e\u7ed3\u678417-\u987a\u5e8f\u67e5\u627e\u4e0e\u4e8c\u5206\u67e5\u627e",permalink:"/docs/DataStructer/\u6570\u636e\u7ed3\u678417-\u987a\u5e8f\u67e5\u627e\u4e0e\u4e8c\u5206\u67e5\u627e"},next:{title:"\u6570\u636e\u7ed3\u678419-\u6392\u5e8f",permalink:"/docs/DataStructer/\u6570\u636e\u7ed3\u678419-\u6392\u5e8f"}},d={},t=[{value:"1. \u57fa\u672c\u6982\u5ff5",id:"1-\u57fa\u672c\u6982\u5ff5",level:2},{value:"2. \u54c8\u5e0c\u51fd\u6570",id:"2-\u54c8\u5e0c\u51fd\u6570",level:2},{value:"3. \u51b2\u7a81\u89e3\u51b3\u65b9\u6cd5",id:"3-\u51b2\u7a81\u89e3\u51b3\u65b9\u6cd5",level:2},{value:"4. \u5728C\u8bed\u8a00\u4e2d\u7684\u5177\u4f53\u5b9e\u73b0",id:"4-\u5728c\u8bed\u8a00\u4e2d\u7684\u5177\u4f53\u5b9e\u73b0",level:2},{value:"4.1 \u5b9a\u4e49\u7ed3\u6784",id:"41-\u5b9a\u4e49\u7ed3\u6784",level:3},{value:"4.2 \u521d\u59cb\u5316\u54c8\u5e0c\u8868",id:"42-\u521d\u59cb\u5316\u54c8\u5e0c\u8868",level:3},{value:"4.3 \u63d2\u5165\u5143\u7d20",id:"43-\u63d2\u5165\u5143\u7d20",level:3},{value:"4.4 \u67e5\u627e\u5143\u7d20",id:"44-\u67e5\u627e\u5143\u7d20",level:3},{value:"4.5 \u5220\u9664\u5143\u7d20",id:"45-\u5220\u9664\u5143\u7d20",level:3},{value:"4.6 \u91ca\u653e\u54c8\u5e0c\u8868",id:"46-\u91ca\u653e\u54c8\u5e0c\u8868",level:3},{value:"5. \u793a\u4f8b\u4ee3\u7801",id:"5-\u793a\u4f8b\u4ee3\u7801",level:2},{value:"\u95f5\u5e06\u8001\u5e08\u5199\u7684",id:"\u95f5\u5e06\u8001\u5e08\u5199\u7684",level:2},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u8fd0\u884c\u7ed3\u679c",id:"\u8fd0\u884c\u7ed3\u679c",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h1,{id:"\u6570\u636e\u7ed3\u678418-\u54c8\u5e0c\u8868",children:"\u6570\u636e\u7ed3\u678418-\u54c8\u5e0c\u8868"}),"\n",(0,l.jsx)(n.p,{children:"\u54c8\u5e0c\u8868\uff08Hash Table\uff09\u662f\u4e00\u79cd\u975e\u5e38\u9ad8\u6548\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e3b\u8981\u7528\u4e8e\u5feb\u901f\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u3002\u5b83\u901a\u8fc7\u54c8\u5e0c\u51fd\u6570\u5c06\u952e\u6620\u5c04\u5230\u8868\u4e2d\u7684\u7279\u5b9a\u4f4d\u7f6e\uff0c\u4ece\u800c\u52a0\u5feb\u6570\u636e\u8bbf\u95ee\u901f\u5ea6\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u8be6\u7ec6\u4e14\u7cfb\u7edf\u7684\u54c8\u5e0c\u8868\u5b9e\u73b0\u6307\u5357\uff0c\u5305\u62ec\u57fa\u672c\u6982\u5ff5\u3001\u54c8\u5e0c\u51fd\u6570\u3001\u51b2\u7a81\u89e3\u51b3\u65b9\u6cd5\u4ee5\u53ca\u5728C\u8bed\u8a00\u4e2d\u7684\u5177\u4f53\u5b9e\u73b0\u3002"}),"\n",(0,l.jsx)(n.h2,{id:"1-\u57fa\u672c\u6982\u5ff5",children:"1. \u57fa\u672c\u6982\u5ff5"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"\u54c8\u5e0c\u51fd\u6570 (Hash Function)"}),": \u5c06\u8f93\u5165\uff08\u952e\uff09\u6620\u5c04\u5230\u54c8\u5e0c\u8868\u4e2d\u4e00\u4e2a\u7d22\u5f15\u4f4d\u7f6e\u7684\u51fd\u6570\u3002"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"\u54c8\u5e0c\u8868 (Hash Table)"}),": \u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u4e8e\u5b58\u50a8\u952e\u503c\u5bf9\u3002"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"\u51b2\u7a81 (Collision)"}),": \u4e0d\u540c\u7684\u952e\u901a\u8fc7\u54c8\u5e0c\u51fd\u6570\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u7d22\u5f15\u4f4d\u7f6e\u3002"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"\u88c5\u8f7d\u56e0\u5b50 (Load Factor)"}),": \u54c8\u5e0c\u8868\u4e2d\u5143\u7d20\u6570\u91cf\u4e0e\u54c8\u5e0c\u8868\u5927\u5c0f\u7684\u6bd4\u503c\uff0c\u7528\u4e8e\u8861\u91cf\u54c8\u5e0c\u8868\u7684\u88c5\u6ee1\u7a0b\u5ea6\u3002"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"2-\u54c8\u5e0c\u51fd\u6570",children:"2. \u54c8\u5e0c\u51fd\u6570"}),"\n",(0,l.jsx)(n.p,{children:"\u54c8\u5e0c\u51fd\u6570\u7684\u9009\u62e9\u5bf9\u54c8\u5e0c\u8868\u7684\u6027\u80fd\u6709\u5f88\u5927\u5f71\u54cd\u3002\u4e00\u4e2a\u597d\u7684\u54c8\u5e0c\u51fd\u6570\u5e94\u8be5\u5747\u5300\u5730\u5206\u5e03\u952e\uff0c\u51cf\u5c11\u51b2\u7a81\u3002\u5e38\u89c1\u7684\u54c8\u5e0c\u51fd\u6570\u6709\uff1a"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-c",children:"unsigned int hash_function(const char *key) {\n    unsigned int hash = 0;\n    while (*key) {\n        hash = (hash << 5) + *key++;\n    }\n    return hash;\n}\n"})}),"\n",(0,l.jsx)(n.h2,{id:"3-\u51b2\u7a81\u89e3\u51b3\u65b9\u6cd5",children:"3. \u51b2\u7a81\u89e3\u51b3\u65b9\u6cd5"}),"\n",(0,l.jsx)(n.p,{children:"\u5e38\u89c1\u7684\u51b2\u7a81\u89e3\u51b3\u65b9\u6cd5\u6709\u4e24\u79cd\uff1a"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"\u94fe\u5730\u5740\u6cd5 (Chaining)"}),": \u6bcf\u4e2a\u54c8\u5e0c\u8868\u7684\u7d22\u5f15\u4f4d\u7f6e\u5b58\u50a8\u4e00\u4e2a\u94fe\u8868\uff0c\u5f53\u51b2\u7a81\u53d1\u751f\u65f6\uff0c\u5c06\u65b0\u5143\u7d20\u6dfb\u52a0\u5230\u94fe\u8868\u4e2d\u3002"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"\u5f00\u653e\u5730\u5740\u6cd5 (Open Addressing)"}),": \u5f53\u51b2\u7a81\u53d1\u751f\u65f6\uff0c\u5bfb\u627e\u4e0b\u4e00\u4e2a\u7a7a\u95f2\u4f4d\u7f6e\u5b58\u50a8\u5143\u7d20\u3002"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"4-\u5728c\u8bed\u8a00\u4e2d\u7684\u5177\u4f53\u5b9e\u73b0",children:"4. \u5728C\u8bed\u8a00\u4e2d\u7684\u5177\u4f53\u5b9e\u73b0"}),"\n",(0,l.jsx)(n.h3,{id:"41-\u5b9a\u4e49\u7ed3\u6784",children:"4.1 \u5b9a\u4e49\u7ed3\u6784"}),"\n",(0,l.jsx)(n.p,{children:"\u9996\u5148\uff0c\u5b9a\u4e49\u54c8\u5e0c\u8868\u7684\u7ed3\u6784\uff0c\u5305\u62ec\u94fe\u8868\u8282\u70b9\u548c\u54c8\u5e0c\u8868\u672c\u8eab\u3002"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-c",children:"#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define TABLE_SIZE 100\n\ntypedef struct HashNode {\n    char *key;\n    int value;\n    struct HashNode *next;\n} HashNode;\n\ntypedef struct HashTable {\n    HashNode **table;\n} HashTable;\n"})}),"\n",(0,l.jsx)(n.h3,{id:"42-\u521d\u59cb\u5316\u54c8\u5e0c\u8868",children:"4.2 \u521d\u59cb\u5316\u54c8\u5e0c\u8868"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-c",children:"HashTable* create_table() {\n    HashTable *hashTable = (HashTable*) malloc(sizeof(HashTable));\n    hashTable->table = (HashNode**) malloc(TABLE_SIZE * sizeof(HashNode*));\n    for (int i = 0; i < TABLE_SIZE; i++) {\n        hashTable->table[i] = NULL;\n    }\n    return hashTable;\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"43-\u63d2\u5165\u5143\u7d20",children:"4.3 \u63d2\u5165\u5143\u7d20"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-c",children:"void insert(HashTable *hashTable, const char *key, int value) {\n    unsigned int index = hash_function(key) % TABLE_SIZE;\n    HashNode *newNode = (HashNode*) malloc(sizeof(HashNode));\n    newNode->key = strdup(key);\n    newNode->value = value;\n    newNode->next = hashTable->table[index];\n    hashTable->table[index] = newNode;\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"44-\u67e5\u627e\u5143\u7d20",children:"4.4 \u67e5\u627e\u5143\u7d20"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-c",children:"int search(HashTable *hashTable, const char *key) {\n    unsigned int index = hash_function(key) % TABLE_SIZE;\n    HashNode *node = hashTable->table[index];\n    while (node != NULL) {\n        if (strcmp(node->key, key) == 0) {\n            return node->value;\n        }\n        node = node->next;\n    }\n    return -1; // Not found\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"45-\u5220\u9664\u5143\u7d20",children:"4.5 \u5220\u9664\u5143\u7d20"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-c",children:"void delete(HashTable *hashTable, const char *key) {\n    unsigned int index = hash_function(key) % TABLE_SIZE;\n    HashNode *node = hashTable->table[index];\n    HashNode *prev = NULL;\n    while (node != NULL && strcmp(node->key, key) != 0) {\n        prev = node;\n        node = node->next;\n    }\n    if (node == NULL) {\n        return; // Key not found\n    }\n    if (prev == NULL) {\n        hashTable->table[index] = node->next;\n    } else {\n        prev->next = node->next;\n    }\n    free(node->key);\n    free(node);\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"46-\u91ca\u653e\u54c8\u5e0c\u8868",children:"4.6 \u91ca\u653e\u54c8\u5e0c\u8868"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-c",children:"void free_table(HashTable *hashTable) {\n    for (int i = 0; i < TABLE_SIZE; i++) {\n        HashNode *node = hashTable->table[i];\n        while (node != NULL) {\n            HashNode *temp = node;\n            node = node->next;\n            free(temp->key);\n            free(temp);\n        }\n    }\n    free(hashTable->table);\n    free(hashTable);\n}\n"})}),"\n",(0,l.jsx)(n.h2,{id:"5-\u793a\u4f8b\u4ee3\u7801",children:"5. \u793a\u4f8b\u4ee3\u7801"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-c",children:'int main() {\n    HashTable *hashTable = create_table();\n\n    insert(hashTable, "key1", 1);\n    insert(hashTable, "key2", 2);\n    insert(hashTable, "key3", 3);\n\n    printf("Value for \'key1\': %d\\n", search(hashTable, "key1"));\n    printf("Value for \'key2\': %d\\n", search(hashTable, "key2"));\n    printf("Value for \'key3\': %d\\n", search(hashTable, "key3"));\n\n    delete(hashTable, "key2");\n    printf("Value for \'key2\' after deletion: %d\\n", search(hashTable, "key2"));\n\n    free_table(hashTable);\n\n    return 0;\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"\u95f5\u5e06\u8001\u5e08\u5199\u7684",children:"\u95f5\u5e06\u8001\u5e08\u5199\u7684"}),"\n",(0,l.jsx)(n.h3,{id:"\u4ee3\u7801",children:"\u4ee3\u7801"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-c",children:"#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n \n#define TABLE_SIZE 100 // \u54c8\u5e0c\u8868\u7684\u5927\u5c0f\n#define KEY_SIZE 50  // \u952e\u7684\u6700\u5927\u957f\u5ea6\n#define VALUE_SIZE 100 // \u503c\u7684\u6700\u5927\u957f\u5ea6\n \ntypedef struct KeyValuePair {\n    char key[KEY_SIZE];\n    char value[VALUE_SIZE];\n    struct KeyValuePair *next; // \u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u5904\u7406\u51b2\u7a81\n} KeyValuePair;\n \ntypedef struct {\n    KeyValuePair *table[TABLE_SIZE]; // \u54c8\u5e0c\u8868\u6570\u7ec4\n} HashTable;\n \n// \u521d\u59cb\u5316\u54c8\u5e0c\u8868\nvoid initHashTable(HashTable *hashTable) {\n    for (int i = 0; i < TABLE_SIZE; i++) {\n        hashTable->table[i] = NULL;\n    }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"\u8fd0\u884c\u7ed3\u679c",children:"\u8fd0\u884c\u7ed3\u679c"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"Collision, move forward for key 57.\nCollision, move forward for key 95.\nCollision, move forward for key 95.\nSearch result of 95 is: r\nSearch result of 38 is: l\nSearch result of 57 is: w\nSearch result of 4 is: x\nPress any key to continue\n\n\n"})})]})}function o(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>h});var l=a(6540);const s={},i=l.createContext(s);function r(e){const n=l.useContext(i);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function h(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),l.createElement(i.Provider,{value:n},e.children)}}}]);