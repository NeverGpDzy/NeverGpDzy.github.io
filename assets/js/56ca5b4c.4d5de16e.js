"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6700],{7762:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=t(4848),i=t(8453);const r={},l="\u6570\u636e\u7ed3\u678417-\u987a\u5e8f\u67e5\u627e\u4e0e\u4e8c\u5206\u67e5\u627e",s={id:"DataStructer/\u6570\u636e\u7ed3\u678417-\u987a\u5e8f\u67e5\u627e\u4e0e\u4e8c\u5206\u67e5\u627e",title:"\u6570\u636e\u7ed3\u678417-\u987a\u5e8f\u67e5\u627e\u4e0e\u4e8c\u5206\u67e5\u627e",description:"\u597d\u7684\uff0c\u4e0b\u9762\u6211\u4eec\u5c06\u8be6\u7ec6\u4ecb\u7ecdC\u8bed\u8a00\u4e2d\u7684\u987a\u5e8f\u67e5\u627e\u548c\u4e8c\u5206\u67e5\u627e\uff0c\u7279\u522b\u662f\u9488\u5bf9\u952e\u503c\u5bf9\u7684\u60c5\u51b5\u3002\u6211\u4eec\u4f1a\u4ece\u57fa\u672c\u6982\u5ff5\u3001\u6570\u636e\u7ed3\u6784\u3001\u5b9e\u73b0\u65b9\u6cd5\u548c\u4ee3\u7801\u793a\u4f8b\u7b49\u65b9\u9762\u8fdb\u884c\u7cfb\u7edf\u8bb2\u89e3\u3002",source:"@site/docs/DataStructer/\u6570\u636e\u7ed3\u678417-\u987a\u5e8f\u67e5\u627e\u4e0e\u4e8c\u5206\u67e5\u627e.md",sourceDirName:"DataStructer",slug:"/DataStructer/\u6570\u636e\u7ed3\u678417-\u987a\u5e8f\u67e5\u627e\u4e0e\u4e8c\u5206\u67e5\u627e",permalink:"/docs/DataStructer/\u6570\u636e\u7ed3\u678417-\u987a\u5e8f\u67e5\u627e\u4e0e\u4e8c\u5206\u67e5\u627e",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"DataStructerSidebar",previous:{title:"\u6570\u636e\u7ed3\u678416-\u56fe\u7684\u904d\u5386-Prim\u7b97\u6cd5\u4e0eDijkstra\u7b97\u6cd5",permalink:"/docs/DataStructer/\u6570\u636e\u7ed3\u678416-\u56fe\u7684\u904d\u5386-Prim\u7b97\u6cd5\u4e0eDijkstra\u7b97\u6cd5"},next:{title:"\u6570\u636e\u7ed3\u678418-\u54c8\u5e0c\u8868",permalink:"/docs/DataStructer/\u6570\u636e\u7ed3\u678418-\u54c8\u5e0c\u8868"}},d={},c=[{value:"\u4e00\u3001\u987a\u5e8f\u67e5\u627e\uff08Sequential Search\uff09",id:"\u4e00\u987a\u5e8f\u67e5\u627esequential-search",level:2},{value:"1. \u6982\u5ff5",id:"1-\u6982\u5ff5",level:3},{value:"2. \u6570\u636e\u7ed3\u6784",id:"2-\u6570\u636e\u7ed3\u6784",level:3},{value:"3. \u521d\u59cb\u5316\u987a\u5e8f\u8868",id:"3-\u521d\u59cb\u5316\u987a\u5e8f\u8868",level:4},{value:"4. \u6dfb\u52a0\u952e\u503c\u5bf9",id:"4-\u6dfb\u52a0\u952e\u503c\u5bf9",level:3},{value:"5. \u987a\u5e8f\u67e5\u627e\u51fd\u6570",id:"5-\u987a\u5e8f\u67e5\u627e\u51fd\u6570",level:3},{value:"6. \u5b8c\u6574\u793a\u4f8b\u4ee3\u7801",id:"6-\u5b8c\u6574\u793a\u4f8b\u4ee3\u7801",level:3},{value:"\u4e8c\u3001\u4e8c\u5206\u67e5\u627e\uff08Binary Search\uff09",id:"\u4e8c\u4e8c\u5206\u67e5\u627ebinary-search",level:2},{value:"1. \u6982\u5ff5",id:"1-\u6982\u5ff5-1",level:3},{value:"2. \u6570\u636e\u7ed3\u6784",id:"2-\u6570\u636e\u7ed3\u6784-1",level:3},{value:"3. \u521d\u59cb\u5316\u987a\u5e8f\u8868",id:"3-\u521d\u59cb\u5316\u987a\u5e8f\u8868-1",level:3},{value:"4. \u6dfb\u52a0\u952e\u503c\u5bf9",id:"4-\u6dfb\u52a0\u952e\u503c\u5bf9-1",level:3},{value:"5. \u4e8c\u5206\u67e5\u627e\u51fd\u6570",id:"5-\u4e8c\u5206\u67e5\u627e\u51fd\u6570",level:3},{value:"6. \u5b8c\u6574\u793a\u4f8b\u4ee3\u7801",id:"6-\u5b8c\u6574\u793a\u4f8b\u4ee3\u7801-1",level:3},{value:"\u603b\u7ed3",id:"\u603b\u7ed3",level:3},{value:"\u95f5\u5e06\u8001\u5e08\u5199\u7684",id:"\u95f5\u5e06\u8001\u5e08\u5199\u7684",level:2},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u8fd0\u884c\u7ed3\u679c",id:"\u8fd0\u884c\u7ed3\u679c",level:3}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"\u6570\u636e\u7ed3\u678417-\u987a\u5e8f\u67e5\u627e\u4e0e\u4e8c\u5206\u67e5\u627e",children:"\u6570\u636e\u7ed3\u678417-\u987a\u5e8f\u67e5\u627e\u4e0e\u4e8c\u5206\u67e5\u627e"}),"\n",(0,a.jsx)(n.p,{children:"\u597d\u7684\uff0c\u4e0b\u9762\u6211\u4eec\u5c06\u8be6\u7ec6\u4ecb\u7ecdC\u8bed\u8a00\u4e2d\u7684\u987a\u5e8f\u67e5\u627e\u548c\u4e8c\u5206\u67e5\u627e\uff0c\u7279\u522b\u662f\u9488\u5bf9\u952e\u503c\u5bf9\u7684\u60c5\u51b5\u3002\u6211\u4eec\u4f1a\u4ece\u57fa\u672c\u6982\u5ff5\u3001\u6570\u636e\u7ed3\u6784\u3001\u5b9e\u73b0\u65b9\u6cd5\u548c\u4ee3\u7801\u793a\u4f8b\u7b49\u65b9\u9762\u8fdb\u884c\u7cfb\u7edf\u8bb2\u89e3\u3002"}),"\n",(0,a.jsx)(n.h2,{id:"\u4e00\u987a\u5e8f\u67e5\u627esequential-search",children:"\u4e00\u3001\u987a\u5e8f\u67e5\u627e\uff08Sequential Search\uff09"}),"\n",(0,a.jsx)(n.h3,{id:"1-\u6982\u5ff5",children:"1. \u6982\u5ff5"}),"\n",(0,a.jsx)(n.p,{children:"\u987a\u5e8f\u67e5\u627e\u662f\u4e00\u79cd\u7b80\u5355\u7684\u67e5\u627e\u7b97\u6cd5\uff0c\u5b83\u4ece\u6570\u636e\u96c6\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u9010\u4e2a\u68c0\u67e5\u6bcf\u4e2a\u5143\u7d20\uff0c\u76f4\u5230\u627e\u5230\u76ee\u6807\u5143\u7d20\u6216\u5230\u8fbe\u6570\u636e\u96c6\u7684\u672b\u5c3e\u3002\u987a\u5e8f\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a (O(n))\uff0c\u5176\u4e2d (n) \u662f\u6570\u636e\u96c6\u7684\u5927\u5c0f\u3002"}),"\n",(0,a.jsx)(n.h3,{id:"2-\u6570\u636e\u7ed3\u6784",children:"2. \u6570\u636e\u7ed3\u6784"}),"\n",(0,a.jsx)(n.p,{children:"\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u5b58\u50a8\u952e\u503c\u5bf9\u3002\u952e\u503c\u5bf9\u53ef\u4ee5\u4f7f\u7528\u7ed3\u6784\u4f53\u6765\u8868\u793a\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",children:"#include <stdio.h>\n#include <stdbool.h>\n\n#define MAX_SIZE 100\n\ntypedef struct {\n    int key;\n    int value;\n} KeyValuePair;\n\ntypedef struct {\n    KeyValuePair data[MAX_SIZE];\n    int size;\n} SequentialTable;\n"})}),"\n",(0,a.jsx)(n.h4,{id:"3-\u521d\u59cb\u5316\u987a\u5e8f\u8868",children:"3. \u521d\u59cb\u5316\u987a\u5e8f\u8868"}),"\n",(0,a.jsx)(n.p,{children:"\u521d\u59cb\u5316\u987a\u5e8f\u8868\u65f6\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u7f6e\u521d\u59cb\u5927\u5c0f\u4e3a0\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",children:"void initTable(SequentialTable *table) {\n    table->size = 0;\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"4-\u6dfb\u52a0\u952e\u503c\u5bf9",children:"4. \u6dfb\u52a0\u952e\u503c\u5bf9"}),"\n",(0,a.jsx)(n.p,{children:"\u5411\u987a\u5e8f\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",children:"bool addKeyValuePair(SequentialTable *table, int key, int value) {\n    if (table->size >= MAX_SIZE) {\n        return false; // \u8868\u5df2\u6ee1\n    }\n    table->data[table->size].key = key;\n    table->data[table->size].value = value;\n    table->size++;\n    return true;\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"5-\u987a\u5e8f\u67e5\u627e\u51fd\u6570",children:"5. \u987a\u5e8f\u67e5\u627e\u51fd\u6570"}),"\n",(0,a.jsx)(n.p,{children:"\u5b9e\u73b0\u987a\u5e8f\u67e5\u627e\u51fd\u6570\uff0c\u8fd4\u56de\u952e\u5bf9\u5e94\u7684\u503c\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",children:"int sequentialSearch(SequentialTable *table, int key) {\n    for (int i = 0; i < table->size; i++) {\n        if (table->data[i].key == key) {\n            return table->data[i].value;\n        }\n    }\n    return -1; // \u672a\u627e\u5230\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"6-\u5b8c\u6574\u793a\u4f8b\u4ee3\u7801",children:"6. \u5b8c\u6574\u793a\u4f8b\u4ee3\u7801"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\n#include <stdbool.h>\n\n#define MAX_SIZE 100\n\ntypedef struct {\n    int key;\n    int value;\n} KeyValuePair;\n\ntypedef struct {\n    KeyValuePair data[MAX_SIZE];\n    int size;\n} SequentialTable;\n\nvoid initTable(SequentialTable *table) {\n    table->size = 0;\n}\n\nbool addKeyValuePair(SequentialTable *table, int key, int value) {\n    if (table->size >= MAX_SIZE) {\n        return false; // \u8868\u5df2\u6ee1\n    }\n    table->data[table->size].key = key;\n    table->data[table->size].value = value;\n    table->size++;\n    return true;\n}\n\nint sequentialSearch(SequentialTable *table, int key) {\n    for (int i = 0; i < table->size; i++) {\n        if (table->data[i].key == key) {\n            return table->data[i].value;\n        }\n    }\n    return -1; // \u672a\u627e\u5230\n}\n\nint main() {\n    SequentialTable table;\n    initTable(&table);\n\n    addKeyValuePair(&table, 1, 100);\n    addKeyValuePair(&table, 2, 200);\n    addKeyValuePair(&table, 3, 300);\n\n    int key = 2;\n    int value = sequentialSearch(&table, key);\n    if (value != -1) {\n        printf("Key %d found with value %d\\n", key, value);\n    } else {\n        printf("Key %d not found\\n", key);\n    }\n    \n    return 0;\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"\u4e8c\u4e8c\u5206\u67e5\u627ebinary-search",children:"\u4e8c\u3001\u4e8c\u5206\u67e5\u627e\uff08Binary Search\uff09"}),"\n",(0,a.jsx)(n.h3,{id:"1-\u6982\u5ff5-1",children:"1. \u6982\u5ff5"}),"\n",(0,a.jsx)(n.p,{children:"\u4e8c\u5206\u67e5\u627e\u662f\u4e00\u79cd\u9ad8\u6548\u7684\u67e5\u627e\u7b97\u6cd5\uff0c\u9002\u7528\u4e8e\u6709\u5e8f\u6570\u7ec4\u3002\u5b83\u901a\u8fc7\u53cd\u590d\u5c06\u67e5\u627e\u8303\u56f4\u51cf\u534a\u6765\u7f29\u5c0f\u67e5\u627e\u8303\u56f4\u3002\u4e8c\u5206\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a (O(\\log n))\uff0c\u5176\u4e2d (n) \u662f\u6570\u636e\u96c6\u7684\u5927\u5c0f\u3002"}),"\n",(0,a.jsx)(n.h3,{id:"2-\u6570\u636e\u7ed3\u6784-1",children:"2. \u6570\u636e\u7ed3\u6784"}),"\n",(0,a.jsx)(n.p,{children:"\u4e0e\u987a\u5e8f\u67e5\u627e\u7c7b\u4f3c\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u5b58\u50a8\u952e\u503c\u5bf9\uff0c\u5e76\u786e\u4fdd\u6570\u7ec4\u662f\u6309\u952e\u6392\u5e8f\u7684\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",children:"#include <stdio.h>\n#include <stdbool.h>\n\n#define MAX_SIZE 100\n\ntypedef struct {\n    int key;\n    int value;\n} KeyValuePair;\n\ntypedef struct {\n    KeyValuePair data[MAX_SIZE];\n    int size;\n} SortedTable;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"3-\u521d\u59cb\u5316\u987a\u5e8f\u8868-1",children:"3. \u521d\u59cb\u5316\u987a\u5e8f\u8868"}),"\n",(0,a.jsx)(n.p,{children:"\u521d\u59cb\u5316\u987a\u5e8f\u8868\u65f6\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u7f6e\u521d\u59cb\u5927\u5c0f\u4e3a0\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",children:"void initTable(SortedTable *table) {\n    table->size = 0;\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"4-\u6dfb\u52a0\u952e\u503c\u5bf9-1",children:"4. \u6dfb\u52a0\u952e\u503c\u5bf9"}),"\n",(0,a.jsx)(n.p,{children:"\u5411\u987a\u5e8f\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9\uff0c\u5e76\u4fdd\u6301\u6570\u7ec4\u6709\u5e8f\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",children:"bool addKeyValuePair(SortedTable *table, int key, int value) {\n    if (table->size >= MAX_SIZE) {\n        return false; // \u8868\u5df2\u6ee1\n    }\n    int i;\n    for (i = table->size - 1; (i >= 0 && table->data[i].key > key); i--) {\n        table->data[i + 1] = table->data[i];\n    }\n    table->data[i + 1].key = key;\n    table->data[i + 1].value = value;\n    table->size++;\n    return true;\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"5-\u4e8c\u5206\u67e5\u627e\u51fd\u6570",children:"5. \u4e8c\u5206\u67e5\u627e\u51fd\u6570"}),"\n",(0,a.jsx)(n.p,{children:"\u5b9e\u73b0\u4e8c\u5206\u67e5\u627e\u51fd\u6570\uff0c\u8fd4\u56de\u952e\u5bf9\u5e94\u7684\u503c\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",children:"int binarySearch(SortedTable *table, int key) {\n    int left = 0;\n    int right = table->size - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (table->data[mid].key == key) {\n            return table->data[mid].value;\n        } else if (table->data[mid].key < key) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return -1; // \u672a\u627e\u5230\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"6-\u5b8c\u6574\u793a\u4f8b\u4ee3\u7801-1",children:"6. \u5b8c\u6574\u793a\u4f8b\u4ee3\u7801"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\n#include <stdbool.h>\n\n#define MAX_SIZE 100\n\ntypedef struct {\n    int key;\n    int value;\n} KeyValuePair;\n\ntypedef struct {\n    KeyValuePair data[MAX_SIZE];\n    int size;\n} SortedTable;\n\nvoid initTable(SortedTable *table) {\n    table->size = 0;\n}\n\nbool addKeyValuePair(SortedTable *table, int key, int value) {\n    if (table->size >= MAX_SIZE) {\n        return false; // \u8868\u5df2\u6ee1\n    }\n    int i;\n    for (i = table->size - 1; (i >= 0 && table->data[i].key > key); i--) {\n        table->data[i + 1] = table->data[i];\n    }\n    table->data[i + 1].key = key;\n    table->data[i + 1].value = value;\n    table->size++;\n    return true;\n}\n\nint binarySearch(SortedTable *table, int key) {\n    int left = 0;\n    int right = table->size - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (table->data[mid].key == key) {\n            return table->data[mid].value;\n        } else if (table->data[mid].key < key) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return -1; // \u672a\u627e\u5230\n}\n\nint main() {\n    SortedTable table;\n    initTable(&table);\n\n    addKeyValuePair(&table, 1, 100);\n    addKeyValuePair(&table, 3, 300);\n    addKeyValuePair(&table, 2, 200);\n\n    int key = 2;\n    int value = binarySearch(&table, key);\n    if (value != -1) {\n        printf("Key %d found with value %d\\n", key, value);\n    } else {\n        printf("Key %d not found\\n", key);\n    }\n    \n    return 0;\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"\u603b\u7ed3",children:"\u603b\u7ed3"}),"\n",(0,a.jsx)(n.p,{children:"\u987a\u5e8f\u67e5\u627e\u548c\u4e8c\u5206\u67e5\u627e\u662f\u4e24\u79cd\u5e38\u89c1\u7684\u67e5\u627e\u7b97\u6cd5\uff0c\u5404\u6709\u4f18\u7f3a\u70b9\u3002\u987a\u5e8f\u67e5\u627e\u9002\u7528\u4e8e\u5c0f\u89c4\u6a21\u6570\u636e\u96c6\u6216\u65e0\u5e8f\u6570\u636e\u96c6\uff0c\u800c\u4e8c\u5206\u67e5\u627e\u9002\u7528\u4e8e\u6709\u5e8f\u6570\u636e\u96c6\uff0c\u5e76\u5728\u5927\u89c4\u6a21\u6570\u636e\u96c6\u4e0a\u8868\u73b0\u66f4\u4f18\u3002\u9009\u62e9\u54ea\u79cd\u67e5\u627e\u7b97\u6cd5\u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u5e94\u7528\u573a\u666f\u548c\u6570\u636e\u7279\u70b9\u3002"}),"\n",(0,a.jsx)(n.h2,{id:"\u95f5\u5e06\u8001\u5e08\u5199\u7684",children:"\u95f5\u5e06\u8001\u5e08\u5199\u7684"}),"\n",(0,a.jsx)(n.h3,{id:"\u4ee3\u7801",children:"\u4ee3\u7801"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",children:"/**\n * Sequential search and binary search.\n * \n * @author Fan Min minfanphd@163.com.\n */\n#include <stdio.h>\n#include <malloc.h>\n\n/**\n * <key, value> pair.\n */\ntypedef struct Node{\n\tint key;\n\tchar value;\n}Node, *NodePtr;\n\n/**\n * The data structure of the sequential list.\n */\ntypedef struct SequentialList{\n\tint length;\n\tNodePtr elements;\n}SequentialList, *ListPtr;\n\n/**\n * Initialize a data array.\n */\nListPtr initList(int* paraKeys, char* paraValues, int paraLength){\n\tint i;\n\tListPtr resultPtr = (ListPtr)malloc(sizeof(struct SequentialList));\n\tresultPtr->length = paraLength;\n\tresultPtr->elements = (NodePtr)malloc((paraLength + 1) * sizeof(struct Node));\n\tfor (i = 0; i < paraLength; i ++){\n\t\t//printf(\"setting key for index %d: %d and value: %c\\r\\n\", i, paraKeys[i], paraValues[i]);\n\t\tresultPtr->elements[i + 1].key = paraKeys[i];\n\t\tresultPtr->elements[i + 1].value = paraValues[i];\n\t}//Of for i\n\n\treturn resultPtr;\n}//Of initList\n\n/**\n * Sequential search.\n * @return The value.\n */\nchar sequentialSearch(ListPtr paraListPtr, int paraKey){\n\tint i = paraListPtr->length;\n\tparaListPtr->elements[0].key = paraKey;\n\tparaListPtr->elements[0].value = 'x';\n\n\twhile(paraListPtr->elements[i].key != paraKey){\n\t\ti--;\n\t}//Of while\n\n\treturn paraListPtr->elements[i].value;\n}//Of sequentialSearch\n\n/**\n * Test the sequential search function.\n */\nvoid sequentialSearchTest() {\n\tint tempUnsortedKeys[] = { 4, 5, 3, 6, 10, 7, 1, 9 };\n\tchar tempContents[] = { 'h', 'e', 'l', 'o', 'w', 'r', 'd', '!' };\n\tListPtr tempListPtr = initList(tempUnsortedKeys, tempContents, 8);\n\n\tprintf(\"Search result of 10 is: %c\\r\\n\", sequentialSearch(tempListPtr, 10));\n\tprintf(\"Search result of 5 is: %c\\r\\n\", sequentialSearch(tempListPtr, 5));\n\tprintf(\"Search result of 4 is: %c\\r\\n\", sequentialSearch(tempListPtr, 4));\n\tprintf(\"Search result of 2 is: %c\\r\\n\", sequentialSearch(tempListPtr, 2));\n}// Of sequentialSearchTest\n\n/**\n * Binary search.\n * @return The value.\n */\nchar binarySearch(ListPtr paraListPtr, int paraKey){\n\tint tempLeft = 1;\n\tint tempRight = paraListPtr->length;\n\tint tempMiddle = (tempLeft + tempRight) / 2;\n\n\twhile (tempLeft <= tempRight) {\n\t\ttempMiddle = (tempLeft + tempRight) / 2;\n\t\tif (paraListPtr->elements[tempMiddle].key == paraKey) {\n\t\t\treturn paraListPtr->elements[tempMiddle].value;\n\t\t} else if (paraListPtr->elements[tempMiddle].key <= paraKey) {\n\t\t\ttempLeft = tempMiddle + 1;\n\t\t} else {\n\t\t\ttempRight = tempMiddle - 1;\n\t\t}//Of if\n\t} // Of while\n\n\t// Not found.\n\treturn 'x';\n}//Of binarySearch\n\n/**\n * Test the binary search function.\n */\nvoid binarySearchTest() {\n\tint tempUnsortedKeys[] = { 1, 3, 4, 5, 6, 7, 9, 10 };\n\tchar tempContents[] = { 'h', 'e', 'l', 'o', 'w', 'r', 'd', '!' };\n\tListPtr tempListPtr = initList(tempUnsortedKeys, tempContents, 8);\n\n\tprintf(\"Search result of 10 is: %c\\r\\n\", binarySearch(tempListPtr, 10));\n\tprintf(\"Search result of 5 is: %c\\r\\n\", binarySearch(tempListPtr, 5));\n\tprintf(\"Search result of 4 is: %c\\r\\n\", binarySearch(tempListPtr, 4));\n\tprintf(\"Search result of 2 is: %c\\r\\n\", binarySearch(tempListPtr, 2));\n}// Of binarySearchTest\n\t\n/**\n * The entrance.\n */\nint main(){\n\tprintf(\"\\r\\n-------sequentialSearchTest-------\\r\\n\");\n\tsequentialSearchTest();\n\n\tprintf(\"\\r\\n-------binarySearchTest-------\\r\\n\");\n\tbinarySearchTest();\n\treturn 1;\n}// Of main\n\n\n\n"})}),"\n",(0,a.jsx)(n.h3,{id:"\u8fd0\u884c\u7ed3\u679c",children:"\u8fd0\u884c\u7ed3\u679c"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"-------sequentialSearchTest-------\nSearch result of 10 is: w\nSearch result of 5 is: e\nSearch result of 4 is: h\nSearch result of 2 is: x\n\n-------binarySearchTest-------\nSearch result of 10 is: !\nSearch result of 5 is: o\nSearch result of 4 is: l\nSearch result of 2 is: x\nPress any key to continue\n\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var a=t(6540);const i={},r=a.createContext(i);function l(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);